{"version":3,"file":"587.c8ba431d.js","mappings":"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","sources":["webpack://sas-ui/./node_modules/@patternfly/react-icons/dist/esm/createIcon.js","webpack://sas-ui/./node_modules/@patternfly/react-icons/dist/esm/icons/help-icon.js","webpack://sas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/key-icon.js","webpack://sas-ui/./src/app/modules/ServiceAccounts/components/Credentials/Credentials.tsx","webpack://sas-ui/./src/app/models/service-account.ts","webpack://sas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm.tsx","webpack://sas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nexport var IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize || (IconSize = {}));\nexport const getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nexport function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = __rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\n//# sourceMappingURL=createIcon.js.map","import { createIcon } from '../createIcon';\n\nexport const HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const HelpIcon = createIcon(HelpIconConfig);\n\nexport default HelpIcon;","\"use strict\"\nexports.__esModule = true;\nexports.KeyIconConfig = {\n  name: 'KeyIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M802,320 C748.980664,320 706,277.019336 706,224 C706,170.980664 748.980664,128 802,128 C855.019336,128 898,170.980664 898,224 C898,277.019336 855.019336,320 802,320 M704,0 C527.3,0 384,143.3 384,320 C383.937788,357.490503 390.505571,394.696657 403.4,429.9 L0,824.1 L0,1024 L192,1024 L192,896 L320,896 L320,768 L448,768 L597,622 C596.906403,621.881923 596.838304,621.745723 596.8,621.6 C631.220126,633.811107 667.47802,640.034477 704,640 C880.7,640 1024,496.7 1024,320 C1024,143.3 880.7,0 704,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.KeyIcon = require('../createIcon').createIcon(exports.KeyIconConfig);\nexports[\"default\"] = exports.KeyIcon;","import { FunctionComponent, useState } from \"react\";\nimport {\n  Bullseye,\n  Button,\n  Checkbox,\n  ClipboardCopy,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  Text,\n  TextContent,\n  TextVariants,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport KeyIcon from \"@patternfly/react-icons/dist/js/icons/key-icon\";\nimport \"@patternfly/react-styles/css/utilities/Spacing/spacing.css\";\nimport \"@patternfly/react-styles/css/utilities/Flex/flex.css\";\nimport \"@patternfly/react-styles/css/utilities/Sizing/sizing.css\";\nimport { useTranslation } from \"react-i18next\";\nimport { MASEmptyState } from \"@app/common\";\nimport \"./Credentials.css\";\nimport { ServiceAccount } from \"@rhoas/kafka-management-sdk\";\n\ntype CredentialsProps = {\n  serviceAccount: ServiceAccount;\n  close: () => void;\n};\n\nconst Credentials: FunctionComponent<CredentialsProps> = ({\n  serviceAccount,\n  close,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const confirm = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  return (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t(\"credentials_successfully_generated\"),\n          headingLevel: \"h2\",\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t(\"connect_to_the_kafka_instance_using_this_clientID_and_secret\")}\n          </Text>\n        </TextContent>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t(\"client_id\")}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientID\"\n            data-ouia-component-id={\"button-copy-clientID\"}\n            textAriaLabel={t(\"client_id\")}\n          >\n            {serviceAccount?.client_id}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t(\"common.client_secret\")}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientSecret\"\n            data-ouia-component-id={\"button-copy-clientSecret\"}\n            textAriaLabel={t(\"common.client_secret\")}\n          >\n            {serviceAccount?.client_secret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t(\"create_service_account_credentials_warning_message\")}\n          </Text>\n        </TextContent>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t(\"client_id_confirmation_checkbox_label\")}\n            isChecked={confirmationCheckbox}\n            onChange={confirm}\n            id=\"check-1\"\n            name=\"check1\"\n            ouiaId={\"checkbox\"}\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={close}\n          data-testid=\"modalCredentials-buttonClose\"\n          ouiaId={\"button-close\"}\n        >\n          {t(\"close\")}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n};\n\nexport { Credentials };\n\nexport default Credentials;\n","import { Validated } from \"@app/models/validated\";\nimport { ServiceAccountRequest } from \"@rhoas/kafka-management-sdk\";\n\nexport type NewServiceAccountRequest = {\n  name: Validated<string | undefined>;\n};\n\nexport const asServiceAccountRequest = (\n  value: NewServiceAccountRequest\n): ServiceAccountRequest => {\n  if (value.name.value === undefined) {\n    throw new Error(\"ServiceAccountRequest.name must not be undefined\");\n  }\n  return {\n    name: value.name.value,\n  };\n};\n\nexport const isServiceAccountRequestValidated = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return value.name.validated === \"success\";\n};\n\nexport const isServiceAccountRequestInvalid = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return value.name.validated === \"error\";\n};\n\nexport const createEmptyNewServiceAccountRequest =\n  (): NewServiceAccountRequest => {\n    return {\n      name: {\n        value: \"\",\n      },\n    };\n  };\n","import {\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from \"@app/models\";\nimport { SetStateAction, Dispatch, FunctionComponent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n} from \"@app/utils\";\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  Popover,\n  FormProps,\n} from \"@patternfly/react-core\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\n\nexport type CreateFormProps = {\n  createServiceAccount: () => Promise<void>;\n  serviceAccountRequest: NewServiceAccountRequest;\n  setServiceAccountRequest: Dispatch<SetStateAction<NewServiceAccountRequest>>;\n  id: string;\n};\n\nexport const CreateForm: FunctionComponent<CreateFormProps> = ({\n  serviceAccountRequest,\n  createServiceAccount,\n  setServiceAccountRequest,\n  id,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const validateName = (serviceAccountRequest: NewServiceAccountRequest) => {\n    //validate required field\n    if (\n      serviceAccountRequest.name.value === undefined ||\n      serviceAccountRequest.name.value.trim() === \"\"\n    ) {\n      serviceAccountRequest.name.validated = \"error\";\n      serviceAccountRequest.name.errorMessage = t(\n        \"common.this_is_a_required_field\"\n      );\n    } else if (\n      serviceAccountRequest.name.value !== undefined &&\n      !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(\n        serviceAccountRequest.name.value.trim()\n      )\n    ) {\n      serviceAccountRequest.name.validated = \"error\";\n      serviceAccountRequest.name.errorMessage = t(\n        \"common.input_filed_invalid_helper_text\"\n      );\n    }\n    //validate max length\n    else if (\n      serviceAccountRequest.name.value !== undefined &&\n      serviceAccountRequest.name.value.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH\n    ) {\n      serviceAccountRequest.name.validated = \"error\";\n      serviceAccountRequest.name.errorMessage = t(\n        \"serviceAccount.service_account_name_length_is_greater_than_expected\",\n        {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }\n      );\n    } else {\n      serviceAccountRequest.name.validated = \"success\";\n    }\n    return serviceAccountRequest;\n  };\n\n  const setName = (name: string) => {\n    setServiceAccountRequest((prevState) => {\n      const value = {\n        ...prevState,\n        name: {\n          value: name,\n        },\n      };\n      return validateName(value);\n    });\n  };\n\n  const FormValidAlert: FunctionComponent = () => {\n    if (\n      formSubmitted &&\n      isServiceAccountRequestInvalid(serviceAccountRequest)\n    ) {\n      return (\n        <FormAlert>\n          <Alert\n            variant=\"danger\"\n            title={t(\"common.form_invalid_alert\")}\n            aria-live=\"polite\"\n            isInline\n          />\n        </FormAlert>\n      );\n    }\n    return <></>;\n  };\n\n  const submit: FormProps[\"onSubmit\"] = (event) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n    const validated = validateName(serviceAccountRequest);\n    setServiceAccountRequest({ ...validated });\n\n    if (!isServiceAccountRequestInvalid(validated)) {\n      createServiceAccount().then(() => resetForm());\n    }\n  };\n\n  const resetForm = () => {\n    setServiceAccountRequest(createEmptyNewServiceAccountRequest());\n  };\n\n  return (\n    <Form onSubmit={submit} id={id}>\n      <FormValidAlert />\n      <FormGroup\n        label={t(\"serviceAccount.short_description\")}\n        isRequired\n        fieldId=\"text-input-short-description\"\n        helperTextInvalid={serviceAccountRequest.name.errorMessage}\n        validated={serviceAccountRequest.name.validated}\n        helperText={t(\"common.input_filed_invalid_helper_text\")}\n        labelIcon={\n          <Popover\n            headerContent={\n              <div>{t(\"serviceAccount.short_description_popover_title\")}</div>\n            }\n            bodyContent={\n              <div>{t(\"serviceAccount.short_description_popover_body\")}</div>\n            }\n          >\n            <button\n              aria-label={t(\"serviceAccount.short_description_popover_button\")}\n              onClick={(e) => e.preventDefault()}\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <TextInput\n          isRequired\n          type=\"text\"\n          id=\"text-input-short-description\"\n          name=\"text-input-short-description\"\n          value={serviceAccountRequest.name.value}\n          onChange={setName}\n          validated={serviceAccountRequest.name.validated}\n          autoFocus={true}\n          ouiaId={\"text-input\"}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n","import { FunctionComponent, useState } from \"react\";\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccount,\n} from \"@rhoas/kafka-management-sdk\";\nimport { useTranslation } from \"react-i18next\";\nimport { getModalAppendTo, isServiceApiError } from \"@app/utils\";\nimport {\n  asServiceAccountRequest,\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from \"@app/models\";\nimport { useAuth } from \"@app/auth/Auth\";\nimport {\n  BaseModalProps,\n  CreateServiceAccountProps,\n  useAlert,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { CreateForm } from \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm\";\nimport Credentials from \"@app/modules/ServiceAccounts/components/Credentials/Credentials\";\n\nconst FORM_ID = \"create_service_account_form\";\n\nenum Step {\n  CreateServiceAccount = \"CreateServiceAccount\",\n  Credentials = \"Credentials\",\n}\n\nconst CreateServiceAccountConnected: FunctionComponent<\n  CreateServiceAccountProps & BaseModalProps\n> = ({ onCreate, title, hideModal }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n\n  const [serviceAccountRequest, setServiceAccountRequest] =\n    useState<NewServiceAccountRequest>(createEmptyNewServiceAccountRequest());\n  const [isCreationInProgress, setCreationInProgress] =\n    useState<boolean>(false);\n  const [step, setStep] = useState<Step>(Step.CreateServiceAccount);\n  const [serviceAccountResponse, setServiceAccountResponse] = useState<\n    ServiceAccount | undefined\n  >();\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t(\"something_went_wrong\"),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const createServiceAccount = async () => {\n    const accessToken = await auth?.sas_ui.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        setCreationInProgress(true);\n        const serviceAccount = await apisService\n          .createServiceAccount(asServiceAccountRequest(serviceAccountRequest))\n          .then((res) => res?.data);\n        setServiceAccountResponse(serviceAccount);\n        setStep(Step.Credentials);\n        addAlert &&\n          addAlert({\n            title: t(\"serviceAccount.service_account_creation_success_message\"),\n            variant: AlertVariant.success,\n          });\n        onCreate && onCreate();\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    hideModal();\n  };\n\n  const getModalActions = () => {\n    if (step === Step.CreateServiceAccount) {\n      return [\n        <Button\n          key=\"submit\"\n          variant=\"primary\"\n          type=\"submit\"\n          form={FORM_ID}\n          isDisabled={\n            isServiceAccountRequestInvalid(serviceAccountRequest) ||\n            isCreationInProgress\n          }\n          spinnerAriaValueText={t(\"submitting_request\")}\n          isLoading={isCreationInProgress}\n          data-testid=\"modalCreateServiceAccount-buttonSubmit\"\n          ouiaId={\"button-create\"}\n        >\n          {\"Create\"}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={handleCreateModal}\n          data-testid=\"modalCreateServiceAccount-buttonCancel\"\n          ouiaId={\"button-cancel\"}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ];\n    }\n    return [];\n  };\n\n  const Body: FunctionComponent = () => {\n    if (step === Step.CreateServiceAccount) {\n      return (\n        <CreateForm\n          createServiceAccount={createServiceAccount}\n          setServiceAccountRequest={setServiceAccountRequest}\n          serviceAccountRequest={serviceAccountRequest}\n          id={FORM_ID}\n        />\n      );\n    }\n    if (serviceAccountResponse === undefined) {\n      throw new Error(\"resetServiceAccount must not be undefined\");\n    }\n    return (\n      <Credentials serviceAccount={serviceAccountResponse} close={hideModal} />\n    );\n  };\n\n  return (\n    <Modal\n      id=\"modalCreateSAccount\"\n      variant={ModalVariant.medium}\n      title={step === Step.CreateServiceAccount ? title : \"\"}\n      isOpen={true}\n      onClose={handleCreateModal}\n      appendTo={getModalAppendTo}\n      actions={getModalActions()}\n      ouiaId={\"modal-CredentialsSuccess\"}\n      showClose={false}\n    >\n      <Body />\n    </Modal>\n  );\n};\n\nexport { CreateServiceAccountConnected };\nexport default CreateServiceAccountConnected;\n"],"names":["IconSize","currentId","createIcon","name","xOffset","yOffset","width","height","svgPath","_a","constructor","super","arguments","this","id","render","props","size","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","sm","md","lg","xl","getSize","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","Object","assign","fill","role","d","displayName","defaultProps","HelpIconConfig","HelpIcon","exports","serviceAccount","close","t","useTranslation","confirmationCheckbox","setConfirmationCheckbox","useState","emptyStateProps","variant","EmptyStateVariant","emptyStateIconProps","icon","titleProps","headingLevel","TitleSizes","TextContent","Text","component","TextVariants","className","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","client_id","client_secret","Bullseye","Checkbox","label","isChecked","onChange","checked","ouiaId","Button","isDisabled","onClick","isServiceAccountRequestInvalid","value","validated","CreateForm","serviceAccountRequest","createServiceAccount","setServiceAccountRequest","formSubmitted","setFormSubmitted","validateName","undefined","trim","errorMessage","test","length","maxLength","resetForm","Form","onSubmit","event","preventDefault","then","FormAlert","Alert","isInline","FormGroup","isRequired","fieldId","helperTextInvalid","helperText","labelIcon","Popover","headerContent","bodyContent","e","TextInput","type","prevState","autoFocus","FORM_ID","Step","CreateServiceAccountConnected","onCreate","hideModal","auth","kas","apiBasePath","basePath","useConfig","addAlert","useAlert","isCreationInProgress","setCreationInProgress","step","setStep","CreateServiceAccount","serviceAccountResponse","setServiceAccountResponse","accessToken","sas_ui","getToken","apisService","SecurityApi","Configuration","Error","asServiceAccountRequest","res","data","Credentials","AlertVariant","error","reason","response","description","handleServerError","handleCreateModal","Modal","ModalVariant","isOpen","onClose","appendTo","actions","form","spinnerAriaValueText","isLoading","showClose"],"sourceRoot":""}