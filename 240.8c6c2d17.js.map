{"version":3,"file":"240.8c6c2d17.js","mappings":"8FAEAA,EAAQ,GAAgB,CACtBC,KAAM,UACNC,OAAQ,KACRC,MAAO,KACPC,QAAS,gfACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAU,oBAAoCA,EAAQ,IAC9DA,EAAA,GAAqBA,EAAQ,E,wLCiB7B,MA2FA,EA3FyD,EACvDO,iBACAC,YAEA,MAAM,EAAEC,IAAM,IAAAC,gBAAe,CAAC,uBAEvBC,EAAsBC,IAA2B,IAAAC,WAAS,GAMjE,OACE,+BACE,UAAC,KAAa,eACZC,gBAAiB,CACfC,QAAS,EAAAC,kBAAA,OAEXC,oBAAqB,CACnBC,KAAM,MAERC,WAAY,CACVC,MAAOX,EAAE,sCACTY,aAAc,KACdC,KAAM,EAAAC,WAAA,KACP,YAED,SAAC,EAAAC,YAAW,WACV,SAAC,EAAAC,KAAI,eAACC,UAAW,EAAAC,aAAA,MAAoBC,UAAU,cAAY,UACxDnB,EAAE,sEAGP,UAAC,EAAAoB,WAAU,eAACD,UAAU,cAAY,YAChC,SAAC,EAAAE,eAAc,eAACF,UAAU,qDAAmD,UAC1EnB,EAAE,iBAEL,SAAC,EAAAsB,cAAa,eACZC,YAAU,EACVJ,UAAU,aAAY,cACV,gCAA+B,yBACnB,uBACxBK,cAAexB,EAAE,cAAY,UAE5BF,aAAc,EAAdA,EAAgB2B,kBAGrB,UAAC,EAAAL,WAAU,eAACD,UAAU,cAAY,YAChC,SAAC,EAAAE,eAAc,eAACF,UAAU,qDAAmD,UAC1EnB,EAAE,4BAEL,SAAC,EAAAsB,cAAa,eACZC,YAAU,EACVJ,UAAU,aAAY,cACV,oCAAmC,yBACvB,2BACxBK,cAAexB,EAAE,yBAAuB,UAEvCF,aAAc,EAAdA,EAAgB4B,sBAGrB,SAAC,EAAAX,YAAW,WACV,SAAC,EAAAC,KAAI,eAACC,UAAW,EAAAC,aAAA,MAAoBC,UAAU,cAAY,UACxDnB,EAAE,4DAGP,SAAC,EAAA2B,SAAQ,eAACR,UAAU,cAAY,WAC9B,SAAC,EAAAS,SAAQ,CACPC,MAAO7B,EAAE,yCACT8B,UAAW5B,EACX6B,SA7DOC,IACf7B,EAAwB6B,EAAQ,EA6DxBC,GAAG,UACHzC,KAAK,SACL0C,OAAQ,iBAGZ,SAAC,EAAAC,OAAM,eACL7B,QAAQ,UACR8B,YAAalC,EACbmC,QAAStC,EAAK,cACF,+BACZmC,OAAQ,gBAAc,UAErBlC,EAAE,iBAIV,C,sGC/FEsC,E,yHAAL,SAAKA,GACH,oBACA,2BACD,CAHD,CAAKA,IAAAA,EAAI,KAKT,MAAMC,EAEF,EAAGzC,iBAAgB0C,UAASlC,UAASK,QAAO8B,gBAC9C,MAAM,EAAEzC,IAAM,IAAAC,gBAAe,CAAC,sBACxByC,GAAO,UAEXC,KAAOC,YAAaC,KAClB,IAAAC,cAAe,CAAEH,IAAK,CAAC,IACrB,SAAEI,IAAa,IAAAC,aAAc,CAAC,GAE7BC,EAAgBC,IAAqB,IAAA9C,WAAS,IAC9C+C,EAAMC,IAAW,IAAAhD,UAAekC,EAAKe,UACrCC,EAAqBC,IAA0B,IAAAnD,YAiBhDoD,EAA2B,KAAY,iDAC3C,MAAMC,QAAoBf,aAAI,EAAJA,EAAMgB,OAAOC,WACvC,GAAIF,EACF,IACE,MAAMG,EAAc,IAAI,EAAAC,YACtB,IAAI,EAAAC,cAAc,CAChBL,cACAZ,cAGJ,QAA0BkB,IAAtBjE,EAAemC,GACjB,MAAM,IAAI+B,MAAM,4BAElBd,GAAkB,GAClB,MAAMe,QAAiBL,EAAYJ,yBACjC1D,EAAemC,IAEjBO,GAAWA,IACXe,EAAuBU,EAASC,MAChCd,EAAQd,EAAK6B,Y,CACb,MAAOC,GAjCa,CAACA,I,MACzB,IAAIC,GACA,QAAkBD,KACpBC,EAAuB,QAAd,EAAAD,EAAMH,gBAAQ,eAAEC,KAAKG,QAEhCtB,GACEA,EAAS,CACPpC,MAAOX,EAAE,wBACTM,QAAS,EAAAgE,aAAA,OACTC,YAAaF,GACb,EAwBAG,CAAkBJ,GAClBlB,GAAkB,E,CAGxB,IAEMuB,EAAoB,KACxBhC,GAAW,EAGPiC,EAAiC,KACrC,iBACEC,wBAAyB,CACvBC,OAAQ5E,EAAE,6CAA8C,CACtD6E,iBAAkB/E,EAAeN,KACjCiC,UAAW3B,EAAe2B,eAuClC,OACE,SAAC,EAAAqD,MAAK,eACJ7C,GAAG,8BACH3B,QAASA,EACTK,MAAOwC,IAASb,EAAKe,QAAU1C,EAAQ,GACvCoE,QAAQ,EACRC,QAASP,EACTQ,SAAU,KACVC,QAxCE/B,IAASb,EAAKe,QACT,EACL,SAAC,EAAAlB,OAAM,eAEL7B,QAAQ,UACR6E,KAAK,SACL9C,QAASmB,EACT4B,qBAAsBpF,EAAE,6BACxBqF,UAAWpC,GAAc,UAExBjD,EAAE,0BAPC,WASN,SAAC,EAAAmC,OAAM,eAAc7B,QAAQ,OAAO+B,QAASoC,GAAiB,UAC3DzE,EAAE,mBADO,WAKT,GAwBLsF,WAAW,GAAK,WAEhB,UAvB4B,KAC9B,GAAInC,IAASb,EAAKe,QAChB,OAAO,SAACqB,EAAW,IAErB,QAA4BX,IAAxBT,EACF,MAAM,IAAIU,MAAM,6CAElB,OACE,SAAC,IAAW,CAAClE,eAAgBwD,EAAqBvD,MAAO0C,GAC1D,GAcM,MAER,EAIH,G","sources":["webpack://sas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/key-icon.js","webpack://sas-ui/./src/app/modules/ServiceAccounts/components/Credentials/Credentials.tsx","webpack://sas-ui/./src/app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.KeyIconConfig = {\n  name: 'KeyIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M802,320 C748.980664,320 706,277.019336 706,224 C706,170.980664 748.980664,128 802,128 C855.019336,128 898,170.980664 898,224 C898,277.019336 855.019336,320 802,320 M704,0 C527.3,0 384,143.3 384,320 C383.937788,357.490503 390.505571,394.696657 403.4,429.9 L0,824.1 L0,1024 L192,1024 L192,896 L320,896 L320,768 L448,768 L597,622 C596.906403,621.881923 596.838304,621.745723 596.8,621.6 C631.220126,633.811107 667.47802,640.034477 704,640 C880.7,640 1024,496.7 1024,320 C1024,143.3 880.7,0 704,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.KeyIcon = require('../createIcon').createIcon(exports.KeyIconConfig);\nexports[\"default\"] = exports.KeyIcon;","import { FunctionComponent, useState } from \"react\";\nimport {\n  Bullseye,\n  Button,\n  Checkbox,\n  ClipboardCopy,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  Text,\n  TextContent,\n  TextVariants,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport KeyIcon from \"@patternfly/react-icons/dist/js/icons/key-icon\";\nimport \"@patternfly/react-styles/css/utilities/Spacing/spacing.css\";\nimport \"@patternfly/react-styles/css/utilities/Flex/flex.css\";\nimport \"@patternfly/react-styles/css/utilities/Sizing/sizing.css\";\nimport { useTranslation } from \"react-i18next\";\nimport { MASEmptyState } from \"@app/common\";\nimport \"./Credentials.css\";\nimport { ServiceAccount } from \"@rhoas/kafka-management-sdk\";\n\ntype CredentialsProps = {\n  serviceAccount: ServiceAccount;\n  close: () => void;\n};\n\nconst Credentials: FunctionComponent<CredentialsProps> = ({\n  serviceAccount,\n  close,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const confirm = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  return (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t(\"credentials_successfully_generated\"),\n          headingLevel: \"h2\",\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t(\"connect_to_the_kafka_instance_using_this_clientID_and_secret\")}\n          </Text>\n        </TextContent>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t(\"client_id\")}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientID\"\n            data-ouia-component-id={\"button-copy-clientID\"}\n            textAriaLabel={t(\"client_id\")}\n          >\n            {serviceAccount?.client_id}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t(\"common.client_secret\")}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientSecret\"\n            data-ouia-component-id={\"button-copy-clientSecret\"}\n            textAriaLabel={t(\"common.client_secret\")}\n          >\n            {serviceAccount?.client_secret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t(\"create_service_account_credentials_warning_message\")}\n          </Text>\n        </TextContent>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t(\"client_id_confirmation_checkbox_label\")}\n            isChecked={confirmationCheckbox}\n            onChange={confirm}\n            id=\"check-1\"\n            name=\"check1\"\n            ouiaId={\"checkbox\"}\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={close}\n          data-testid=\"modalCredentials-buttonClose\"\n          ouiaId={\"button-close\"}\n        >\n          {t(\"close\")}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n};\n\nexport { Credentials };\n\nexport default Credentials;\n","import { FunctionComponent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Button, Modal } from \"@patternfly/react-core\";\nimport { isServiceApiError } from \"@app/utils\";\nimport { getModalAppendTo } from \"@app/utils/utils\";\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccount,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  BaseModalProps,\n  ResetServiceAccountCredentialsProps,\n  useAlert,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { useAuth } from \"@app/auth/Auth\";\nimport Credentials from \"@app/modules/ServiceAccounts/components/Credentials/Credentials\";\n\nenum Step {\n  Confirm = \"Confirm\",\n  Credentials = \"Credentials\",\n}\n\nconst ResetServiceAccountCredentials: FunctionComponent<\n  ResetServiceAccountCredentialsProps & BaseModalProps\n> = ({ serviceAccount, onReset, variant, title, hideModal }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n\n  const [isModalLoading, setIsModalLoading] = useState(false);\n  const [step, setStep] = useState<Step>(Step.Confirm);\n  const [resetServiceAccount, setResetServiceAccount] = useState<\n    ServiceAccount | undefined\n  >();\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t(\"something_went_wrong\"),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const resetServiceAccountCreds = async () => {\n    const accessToken = await auth?.sas_ui.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (serviceAccount.id === undefined) {\n          throw new Error(\"id must not be undefined\");\n        }\n        setIsModalLoading(true);\n        const response = await apisService.resetServiceAccountCreds(\n          serviceAccount.id\n        );\n        onReset && onReset();\n        setResetServiceAccount(response.data);\n        setStep(Step.Credentials);\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const StepConfirm: FunctionComponent = () => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: t(\"serviceAccount.client_secret_will_be_reset\", {\n          serviceAccountId: serviceAccount.name,\n          client_id: serviceAccount.client_id,\n        }),\n      }}\n    />\n  );\n\n  const getModalActions = () => {\n    if (step === Step.Confirm) {\n      return [\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={resetServiceAccountCreds}\n          spinnerAriaValueText={t(\"common.submitting_request\")}\n          isLoading={isModalLoading}\n        >\n          {t(\"serviceAccount.reset\")}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {t(\"common.cancel\")}\n        </Button>,\n      ];\n    }\n    return [];\n  };\n\n  const Body: FunctionComponent = () => {\n    if (step === Step.Confirm) {\n      return <StepConfirm />;\n    }\n    if (resetServiceAccount === undefined) {\n      throw new Error(\"resetServiceAccount must not be undefined\");\n    }\n    return (\n      <Credentials serviceAccount={resetServiceAccount} close={hideModal} />\n    );\n  };\n\n  return (\n    <Modal\n      id=\"reset-service-account-modal\"\n      variant={variant}\n      title={step === Step.Confirm ? title : \"\"}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={getModalActions()}\n      showClose={false}\n    >\n      <Body />\n    </Modal>\n  );\n};\n\nexport { ResetServiceAccountCredentials };\nexport default ResetServiceAccountCredentials;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","serviceAccount","close","t","useTranslation","confirmationCheckbox","setConfirmationCheckbox","useState","emptyStateProps","variant","EmptyStateVariant","emptyStateIconProps","icon","titleProps","title","headingLevel","size","TitleSizes","TextContent","Text","component","TextVariants","className","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","client_id","client_secret","Bullseye","Checkbox","label","isChecked","onChange","checked","id","ouiaId","Button","isDisabled","onClick","Step","ResetServiceAccountCredentials","onReset","hideModal","auth","kas","apiBasePath","basePath","useConfig","addAlert","useAlert","isModalLoading","setIsModalLoading","step","setStep","Confirm","resetServiceAccount","setResetServiceAccount","resetServiceAccountCreds","accessToken","sas_ui","getToken","apisService","SecurityApi","Configuration","undefined","Error","response","data","Credentials","error","reason","AlertVariant","description","handleServerError","handleModalToggle","StepConfirm","dangerouslySetInnerHTML","__html","serviceAccountId","Modal","isOpen","onClose","appendTo","actions","type","spinnerAriaValueText","isLoading","showClose"],"sourceRoot":""}